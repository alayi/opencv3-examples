
//opencv
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include "opencv2/opencv.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
//C
#include <stdio.h>
//C++
#include <iostream>
#include <sstream>

using namespace cv;
using namespace std;

// Global variables
Mat frame;                       // Current frame
Mat fgMaskMOG2;                  // fg mask fg mask generated by MOG2 method
Ptr<BackgroundSubtractor> pMOG2; // MOG2 Background subtractor
Mat lab_frame, gray_frame;

int main(){


  pMOG2 = createBackgroundSubtractorMOG2(); // MOG2 approach
  
  namedWindow("video");
  namedWindow("FG Mask MOG2");
  
  VideoCapture cap(0);
  
  if(!cap.isOpened()) {
    cout << "webcam not opened" << endl;
    return -1;
  }

  while(1) {

    cap >> gray_frame;

    // convert colors to reduce color
    // cvtColor(frame, lab_frame, CV_BGR2Lab);

    // vector<Mat> channels(3);
    // split(lab_frame, channels);
    
    // cvtColor(channels[0], gray_frame, CV_GRAY2RGB);

    //update the background model
    pMOG2->apply(gray_frame, fgMaskMOG2);

    //get the frame number and write it on the current frame
    stringstream ss;
    rectangle(frame, cv::Point(10, 2), cv::Point(100,20),
	      cv::Scalar(255,255,255), -1);
    ss << cap.get(CAP_PROP_POS_FRAMES);
    string frameNumberString = ss.str();
    putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
	    FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));

    imshow("video", gray_frame);
    imshow("FG Mask MOG2", fgMaskMOG2);
    
    if(waitKey(30) >= 0) break;
    
  }

  cap.release();
  
  return 0;
}
